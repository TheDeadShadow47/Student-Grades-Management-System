class Student:
    def __init__(self, name):
        if not name or name.isnumeric():
            raise ValueError("Le nom ne peut pas être vide ou un nombre.")
        self.name = name
        self.grades = []

    def add_grade(self, grade):
        if grade < 0 or grade > 20:
            raise ValueError("La note doit être entre 0 et 20.")
        self.grades.append(grade)

    @property
    def average(self):
        if not self.grades:
            return 0
        return sum(self.grades) / len(self.grades)

    def module_status(self):
        status = []
        sup5 = all(g >= 5 for g in self.grades)
        for g in self.grades:
            if g >= 10 or (self.average >= 10 and sup5):
                status.append("valide")
            else:
                status.append("ratt")
        return status

class GradeSystem:
    def __init__(self):
        self.students = []

    def add_student(self, student):
        self.students.append(student)

    def display_table(self):
        if not self.students:
            print("Aucun étudiant ajouté.")
            return
        max_len = max(len(s.name) for s in self.students)
        header = "Nom".ljust(max_len + 2) + "".join([f"Module{i+1}".ljust(8) for i in range(6)]) + "Moyenne".ljust(8)
        print("\n" + header)
        for s in self.students:
            print(s.name.ljust(max_len + 2), end="")
            for g in s.grades:
                print(f"{g:.2f}".ljust(9), end="")
            print(f"{s.average:.2f}".ljust(9))
        print("moy_mod".ljust(max_len + 2), end="")
        for i in range(6):
            module_avg = sum(s.grades[i] for s in self.students) / len(self.students)
            print(f"{module_avg:.2f}".ljust(9), end="")
        overall_avg = sum(s.average for s in self.students) / len(self.students)
        print(f"{overall_avg:.2f}".ljust(9))

    def search_student(self, query):
        found = False
        for s in self.students:
            if query.lower() in s.name.lower():
                print(f"\nDétails pour l'étudiant {s.name}:")
                print("Notes:", s.grades)
                print("Moyenne générale:", s.average)
                found = True
        if not found:
            print("Aucun étudiant trouvé.")

    def swap_students(self, name1, name2):
        s1 = s2 = None
        for s in self.students:
            if s.name == name1:
                s1 = s
            if s.name == name2:
                s2 = s
        if s1 and s2:
            s1.grades, s2.grades = s2.grades, s1.grades
            print(f"Échange des notes entre {name1} et {name2} effectué.")
        else:
            print("Un ou les deux noms n'existent pas.")

    def sort_students(self):
        self.students.sort(key=lambda s: s.average, reverse=True)
        print("Tri effectué par moyenne décroissante.")

    def module_validation(self):
        for s in self.students:
            print(f"\nÉtudiant : {s.name}")
            status = s.module_status()
            for i, g in enumerate(s.grades):
                print(f"  Module {i+1}: {g:.2f} -> {status[i]}")
            print("  Moyenne générale:", round(s.average, 2))
            if "ratt" in status:
                print("  L'étudiant doit repasser certains modules.")
            else:
                print("  L'étudiant a validé tous les modules.")

def main():
    grade_system = GradeSystem()
    while True:
        print("\n------ MENU PRINCIPAL ------")
        print("1. Ajouter un étudiant")
        print("2. Afficher le tableau des notes")
        print("3. Rechercher un étudiant")
        print("4. Permuter les notes entre deux étudiants")
        print("5. Trier les étudiants par moyenne")
        print("6. Voir la validation des modules")
        print("0. Quitter")
        choice = input("Choisissez une option : ")

        if choice == "1":
            name = input("Nom de l'étudiant : ")
            try:
                student = Student(name)
            except ValueError as e:
                print(e)
                continue
            for i in range(6):
                while True:
                    try:
                        grade = float(input(f"Entrez la note {i+1} : "))
                        student.add_grade(grade)
                        break
                    except ValueError as e:
                        print("Erreur :", e)
            grade_system.add_student(student)
        elif choice == "2":
            grade_system.display_table()
        elif choice == "3":
            query = input("Nom à rechercher : ")
            grade_system.search_student(query)
        elif choice == "4":
            n1 = input("Nom du premier étudiant : ")
            n2 = input("Nom du deuxième étudiant : ")
            grade_system.swap_students(n1, n2)
        elif choice == "5":
            grade_system.sort_students()
        elif choice == "6":
            grade_system.module_validation()
        elif choice == "0":
            print("Au revoir !")
            break
        else:
            print("Option invalide.")

if __name__ == "__main__":
    main()
